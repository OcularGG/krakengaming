// Development schema for SQLite - simplified version
// This is a temporary development schema that avoids SQLite limitations
// Production will use the full PostgreSQL schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User management - simplified for SQLite
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  discordId String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Port Battle permissions
  canCreatePortBattles Boolean @default(false)

  // Relationships
  sessions   Session[]
  applications Application[]
  applicationVouches ApplicationVouch[]
  bugReports BugReport[]
  createdPortBattles PortBattle[] @relation("PortBattleCreator")
  portBattleSignups PortBattleSignup[]
  screeningSignups ScreeningSignup[]
  userStrikes UserStrike[]
  commandRoles CommandStructureRole[]

  @@map("users")
}

// Session management for authentication
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Applications - updated to match API expectations
model Application {
  id        String   @id @default(cuid())
  userId    String
  status    String   @default("PENDING") // ApplicationStatus as string

  // User info
  discordId       String
  discordUsername String
  applicantName   String   // captainName from form
  email          String?

  // Application form data
  captainName              String
  preferredNickname        String?
  currentNation            String
  timeZone                 String
  hoursInNavalAction       Int
  steamConnected           Boolean
  currentRank              String
  previousCommands         String?
  preferredRole            String
  isPortBattleCommander    Boolean
  commanderExperience      String?
  isCrafter                Boolean
  weeklyPlayTime           Int
  portBattleAvailability   String  // JSON string of array
  typicalSchedule          String
  declarationAccuracy      Boolean
  declarationHonor         Boolean
  declarationRules         Boolean
  signature                String

  // Discord integration
  discordChannelId String?
  applicationEmbed String? // JSON as string

  // Timestamps
  submittedAt DateTime @default(now())
  reviewedAt  DateTime?
  updatedAt   DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  vouches ApplicationVouch[]

  @@map("applications")
}

// Application vouches
model ApplicationVouch {
  id            String   @id @default(cuid())
  applicationId String
  reviewerId    String
  isPositive    Boolean
  comment       String?
  createdAt     DateTime @default(now())

  // Relationships
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  reviewer    User        @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  @@unique([applicationId, reviewerId])
  @@map("application_vouches")
}

// Application cooldowns
model ApplicationCooldown {
  id             String    @id @default(cuid())
  discordId      String    @unique
  canReapplyAt   DateTime
  reason         String
  overriddenBy   String?
  overriddenAt   DateTime?
  createdAt      DateTime  @default(now())

  @@map("application_cooldowns")
}

// Bug reports - simplified for SQLite
model BugReport {
  id          String   @id @default(cuid())
  title       String
  description String
  severity    String   @default("MEDIUM") // BugSeverity as string
  status      String   @default("OPEN")   // BugStatus as string
  reporterId  String
  assigneeId  String?

  // Additional info (simplified)
  stepsToReproduce String?
  expectedBehavior String?
  actualBehavior   String?
  environment      String?
  attachments      String? // File paths as JSON string

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  reporter User  @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("bug_reports")
}

// Gallery items - simplified for SQLite
model GalleryItem {
  id          String   @id @default(cuid())
  title       String
  description String?
  filePath    String
  fileName    String
  fileSize    Int?
  mimeType    String?
  dimensions  String?  // JSON as string instead of Json type
  tags        String?  // Comma-separated instead of String[]
  upvotes     Int      @default(0)
  downvotes   Int      @default(0)
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("gallery_items")
}

// Cookie consent tracking
model CookieConsent {
  id        String   @id @default(cuid())
  ip        String
  userAgent String
  accepted  Boolean
  timestamp DateTime
  createdAt DateTime @default(now())

  @@map("cookie_consent")
}

// Port Battle Management System
model PortBattle {
  id                String   @id @default(cuid())
  creatorId         String
  portName          String
  meetupTime        DateTime
  battleStartTime   DateTime
  isDeepWater       Boolean
  meetupLocation    String
  brLimit           Int
  commanderName     String?
  secondICName      String?
  reqCommanderName  String?
  status            String   @default("ACTIVE") // ACTIVE, COMPLETED, CANCELLED
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  creator          User @relation("PortBattleCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  fleetSetups      FleetSetup[]
  screeningFleets  ScreeningFleet[]
  captainsCodes    CaptainsCode[]

  @@map("port_battles")
}

model FleetSetup {
  id            String   @id @default(cuid())
  portBattleId  String
  setupName     String   @default("Main Fleet")
  isActive      Boolean  @default(true)
  setupOrder    Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  portBattle PortBattle @relation(fields: [portBattleId], references: [id], onDelete: Cascade)
  roles      FleetRole[]

  @@map("fleet_setups")
}

model FleetRole {
  id               String   @id @default(cuid())
  fleetSetupId     String
  roleOrder        Int
  shipName         String
  brValue          Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  fleetSetup FleetSetup @relation(fields: [fleetSetupId], references: [id], onDelete: Cascade)
  signups    PortBattleSignup[]

  @@map("fleet_roles")
}

model PortBattleSignup {
  id                String   @id @default(cuid())
  userId            String
  fleetRoleId       String
  captainName       String
  clanName          String
  shipName          String
  books             Int      @default(1) // 1-5
  alternateShip     String?
  alternateBooks    Int?     @default(1) // 1-5
  willingToScreen   Boolean  @default(false)
  comments          String?
  status            String   @default("PENDING") // PENDING, APPROVED, DENIED
  signupTime        DateTime @default(now())
  lastEditTime      DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  fleetRole FleetRole @relation(fields: [fleetRoleId], references: [id], onDelete: Cascade)

  @@unique([userId, fleetRoleId])
  @@map("port_battle_signups")
}

model ScreeningFleet {
  id               String   @id @default(cuid())
  portBattleId     String
  fleetType        String   // OFFENSIVE, DEFENSIVE
  commanderName    String?
  secondICName     String?  // Second in Command
  meetupLocation   String?  // Where screening fleet meets
  observation      String?
  shipsRequired    String   // Specific ships or rate classes
  nation           String   // GB, USA, France, Pirates, Russia, Sweden
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  portBattle PortBattle @relation(fields: [portBattleId], references: [id], onDelete: Cascade)
  signups    ScreeningSignup[]

  @@map("screening_fleets")
}

model ScreeningSignup {
  id                String   @id @default(cuid())
  screeningFleetId  String
  userId            String
  captainName       String
  clanName          String
  status            String   @default("PENDING") // PENDING, APPROVED, DENIED
  signupTime        DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  user           User @relation(fields: [userId], references: [id], onDelete: Cascade)
  screeningFleet ScreeningFleet @relation(fields: [screeningFleetId], references: [id], onDelete: Cascade)

  @@unique([userId, screeningFleetId])
  @@map("screening_signups")
}

model CaptainsCode {
  id             String    @id @default(cuid())
  code           String    @unique
  portBattleId   String
  description    String?
  isActive       Boolean   @default(true)
  usageCount     Int       @default(0)
  maxUsage       Int?      // null for unlimited
  expiresAt      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relationships
  portBattle PortBattle @relation(fields: [portBattleId], references: [id], onDelete: Cascade)

  @@map("captains_codes")
}

model UserStrike {
  id               String    @id @default(cuid())
  userId           String
  reason           String
  issuedBy         String?   // Admin who issued the strike
  isRemoved        Boolean   @default(false)
  removedBy        String?
  removedAt        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_strikes")
}

model Clan {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("clans")
}

model Port {
  id        String   @id @default(cuid())
  name      String   @unique
  region    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ports")
}

model BlacklistEntry {
  id               String    @id @default(cuid())
  discordId        String?   // Discord user ID if available
  name             String?   // Text-based name fallback
  reason           String
  addedBy          String    // Admin who added the entry
  isActive         Boolean   @default(true)
  removedBy        String?
  removedAt        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("blacklist_entries")
}

model CommandStructureRole {
  id          String   @id @default(cuid())
  title       String
  description String
  level       Int      @default(1)
  permissions String   // JSON string of permissions array
  assignedUserId String? // User assigned to this role
  flagCountry String?  // Country flag to display
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  assignedUser User? @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)

  @@map("command_structure_roles")
}

// Site settings for admin configuration
model SiteSettings {
  id               String   @id @default(cuid())
  siteName         String   @default("KrakenGaming")
  tagline          String   @default("Legendary Fleet Command")
  description      String   @default("Join the most prestigious naval command in the Caribbean. Elite captains, strategic warfare, and maritime dominance await.")
  commandStructure String?  // JSON string of command structure array
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("site_settings")
}

// Feature cards for homepage
model FeatureCard {
  id          String   @id @default(cuid())
  title       String
  description String
  icon        String   @default("⚓")
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("feature_cards")
}

// Admiralty letter content
model AdmiraltyLetter {
  id        String   @id @default(cuid())
  title     String   @default("Letter from the Admiralty")
  content   String
  author    String   @default("The Admiralty")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admiralty_letters")
}

// Welcome content
model WelcomeContent {
  id        String   @id @default(cuid())
  title     String   @default("Welcome Aboard Captain")
  content   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("welcome_content")
}
